pipeline {
    agent any

    parameters {
        string(name: 'environment', defaultValue: 'Staging', description: 'Choose the environment')
        activeChoiceReactiveParam(name: 'featureChoices') {
            description('Select the features')
            filterable()
            multiple(true)  // Allow multiple selections
            groovyScript {
                script("""
                    def featureChoices = []
                    if (environment == 'Staging') {
                        featureChoices = ['Feature C', 'Feature D']
                    } else if (environment == 'Production') {
                        featureChoices = ['Feature A', 'Feature B']
                    } else {
                        featureChoices = ['Feature A', 'Feature B', 'Feature C', 'Feature D']
                    }
                    return featureChoices
                """)
                fallbackScript('return ["No Features"]')  // Fallback if the Groovy script fails
            }
        }
    }

    stages {
        stage('Build') {
            steps {
                script {
                    // Get the selected features from the parameter
                    def selectedFeatures = params.featureChoices
                    
                    // Display the selected features in the console
                    echo "Selected Features: ${selectedFeatures}"
                    
                    // Iterate over the selected features and take action
                    selectedFeatures.each { feature ->
                        echo "Deploying ${feature}"
                        // Add your deployment logic for each selected feature
                    }
                }
            }
        }
    }
}
